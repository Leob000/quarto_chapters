main="Individual Simplex")
abline(h=1/6 / (1 + 1.75), col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6 * (1 + 1.75), col="#DDDDDD", lwd=3, lty=2)
par(mfrow=c(1, 2), mar=c(4, 4, 1, 0.5))
names <- sapply(1:6, function(k) paste0('q_baseline[', k, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="Outcome",
ylab="Inferred Probability",
display_ylim=c(0, 0.5),
main="Baseline Simplex")
abline(h=1/6 / (1 + 1), col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6,           col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6 * (1 + 1), col="#DDDDDD", lwd=3, lty=2)
names <- sapply(1:6, function(k) paste0('q[', k, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="Outcome",
ylab="Inferred Probability",
display_ylim=c(0, 0.5),
main="Individual Simplex")
abline(h=1/6 / (1 + 1.5), col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6 * (1 + 1.5), col="#DDDDDD", lwd=3, lty=2)
par(mfrow=c(1, 2), mar=c(4, 4, 1, 0.5))
names <- sapply(1:6, function(k) paste0('q_baseline[', k, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="Outcome",
ylab="Inferred Probability",
display_ylim=c(0, 0.5),
main="Baseline Simplex")
abline(h=1/6 / (1 + 1), col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6,           col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6 * (1 + 1), col="#DDDDDD", lwd=3, lty=2)
names <- sapply(1:6, function(k) paste0('q[', k, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="Outcome",
ylab="Inferred Probability",
display_ylim=c(0, 0.5),
main="Individual Simplex")
abline(h=1/6 / (1 + 2), col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6 * (1 + 2), col="#DDDDDD", lwd=3, lty=2)
util$plot_expectand_pushforward(samples[['q[1]']], 20)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(h=1/6 / (1 + 2), col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6 * (1 + 2), col="#DDDDDD", lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 1), col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6 * (1 + 1), col="#DDDDDD", lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(h=1/6 / (1 + 2), col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(h=1/6 * (1 + 2), col="#DDDDDD", lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6 * (1 + 2), col="#DDDDDD", lwd=3, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 1), col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6 * (1 + 1), col="#DDDDDD", lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6 * (1 + 2), col="#DDDDDD", lwd=3, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 1), col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6 * (1 + 1), col="#DDDDDD", lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6,              col="#DDDDDD", lwd=3, lty=2)
abline(v=1/6 * (1 + 2), col="#DDDDDD", lwd=3, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=3, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=3, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=3, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=1, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=1, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 25,
display_name=paste0("q[", k, "]"),
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 25,
display_name=paste0("q[", k, "]"),
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 25,
display_name=paste0("q[", k, "]"),
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q_baseline[1]']], 25,
display_name=paste0("q[", k, "]"),
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
util$plot_expectand_pushforward(samples[['q[1]']], 20,
display_name=paste0("q[", k, "]"),
flim=c(0, 1))
abline(v=1/6 / (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
}
0.05*6
sum(c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1)
)
sum(c(0.1, 0.1, 0.5, 0.1, 0.1, 0.1))
sum(c(0.05, 0.1, 0.6, 0.1, 0.1, 0.05))
sum(c(0.15, 0.2, 1.1, 0.2, 0.2, 0.15))
fit <- stan(file="stan_programs/hierarchical_simplex_prior_2.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q_baseline[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 25,
display_name=name,
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 20,
display_name=name,
flim=c(0, 1))
abline(v=1/6 / (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_2.stan",
data=data, seed=8438338,
warmup=1000, iter=2024, refresh=0)
# A lone divergence.
diagnostics <- util$extract_hmc_diagnostics(fit)
util$check_all_hmc_diagnostics(diagnostics)
samples <- util$extract_expectands(fit)
base_samples <- util$filter_expectands(samples,
c('q', 'q_baseline', 'zeta'),
check_arrays=TRUE)
util$check_all_expectand_diagnostics(base_samples)
plot_individual_samples <- function(q_baseline, lambda, label_cex=1, main="") {
C <- 1 / sqrt(3)
par(mar = c(0, 0, 2, 0))
plot(0, type='n', main=main, axes=FALSE,
xlim=c(-C - 0.2, C + 0.2),
ylim=c(0 - 0.1, 1 + 0.1))
S <- 1000
for (s in 1:S) {
delta <- rgamma(3, 1, 1)
delta <- delta / sum(delta)
q <- (1 - lambda) * q_baseline + lambda * delta
if (valid_simplex_config(q)) {
xy <- to_plot_coordinates(q, C)
points(xy[1], xy[2], col=util$c_dark, pch=16, cex=0.8)
}
}
plot_simplex_border(label_cex, C, FALSE)
xy <- to_plot_coordinates(q_baseline, C)
points(xy[1], xy[2], col="white", pch=16, cex=1.5)
points(xy[1], xy[2], col=util$c_dark_teal, pch=16, cex=1)
}
par(mfrow=c(1, 3))
q_baseline <- c(0.5, 0.3, 0.2)
plot_individual_samples(q_baseline, 0.9, main="lambda = 0.9")
plot_individual_samples(q_baseline, 0.5, main="lambda = 0.5")
plot_individual_samples(q_baseline, 0.1, main="lambda = 0.1")
fit <- stan(file="stan_programs/simu_softmax_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
fit <- stan(file="stan_programs/simu_softmax_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
fit <- stan(file="stan_programs/simu_softmax_1.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(1, 2), mar=c(4, 4, 1, 0.5))
names <- sapply(1:6, function(k) paste0('x[', k, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="Face", ylab="x",
main="Constrained Subspace")
names <- sapply(1:6, function(k) paste0('q[', k, ']'))
util$plot_disc_pushforward_quantiles(samples, names,
xlab="Face", ylab="q",
main="Simplex")
K <- 6
T2 <- matrix(0, K, K - 1)
for (k in 1:(K - 1)) {
T2[k, k] <- 1
T2[K, k] <- -1
}
q_in <- c(0.1, 0.25, 0.2, 0.35, 0.075, 0.025)
x_in <- sapply(1:K, function(k) log(q_in[k]) - mean(log(q_in)) )
y <- t(T3) %*% x_in
x_out <- T2 %*% y
q_out <- sapply(1:K, function(k) exp(x_out[k]) / sum(exp(x_out)) )
data.frame(q_in, q_out)
K <- 6
T2 <- matrix(0, K, K - 1)
for (k in 1:(K - 1)) {
T2[k, k] <- 1
T2[K, k] <- -1
}
q_in <- c(0.1, 0.25, 0.2, 0.35, 0.075, 0.025)
x_in <- sapply(1:K, function(k) log(q_in[k]) - mean(log(q_in)) )
y <- t(T2) %*% x_in
x_out <- T2 %*% y
q_out <- sapply(1:K, function(k) exp(x_out[k]) / sum(exp(x_out)) )
data.frame(q_in, q_out)
sum(x_in)
sum(x_out)
sum(q_out)
fit <- stan(file="stan_programs/hierarchical_simplex_prior_3.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q_baseline[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 25,
display_name=name,
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 20,
display_name=name,
flim=c(0, 1))
abline(v=1/6 / (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_3.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q_baseline[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 25,
display_name=name,
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 20,
display_name=name,
flim=c(0, 1))
abline(v=1/6 / (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_prior_3.stan",
algorithm="Fixed_param", seed=8438338,
warmup=0, iter=1024, refresh=0)
samples <- util$extract_expectands(fit)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q_baseline[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 25,
display_name=name,
flim=c(0, 0.5))
abline(v=1/6 / (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 1), col=util$c_mid_teal, lwd=1.5, lty=2)
}
par(mfrow=c(2, 3), mar=c(4, 4, 1, 0.5))
for (k in 1:K) {
name <- paste0("q[", k, "]")
util$plot_expectand_pushforward(samples[[name]], 20,
display_name=name,
flim=c(0, 1))
abline(v=1/6 / (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6,           col=util$c_mid_teal, lwd=1.5, lty=2)
abline(v=1/6 * (1 + 2.5), col=util$c_mid_teal, lwd=1.5, lty=2)
}
fit <- stan(file="stan_programs/hierarchical_simplex_3.stan",
data=data, seed=8438338,
warmup=1000, iter=2024, refresh=0)
fit <- stan(file="stan_programs/hierarchical_simplex_3.stan",
data=data, seed=8438338,
warmup=1000, iter=2024, refresh=0)
